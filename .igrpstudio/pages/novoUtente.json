{"type":"page","pageName":"novoUtente","path":"novoutente","description":"Novo utente","forceDynamic":false,"id":"tws9pbo94a","types":[{"componentId":"form_3ufmy9","name":"form1","path":"","fields":[{"componentId":"combobox_w037py","name":"tipoUtente","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_uagemt","name":"nome","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_trworp","name":"nif","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_1g3l8x","name":"bi","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_9ysuk3","name":"nome_mae","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_niv7q2","name":"nomePai","type":"string","required":false,"defaultValue":""},{"componentId":"inputdatepicker_znkkec","name":"dataNascimento","type":"date","required":false,"defaultValue":""},{"componentId":"inputtext_xxt81r","name":"morada","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_mvqpf2","name":"telefone","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_zeynhn","name":"email","type":"string","required":false,"defaultValue":""},{"componentId":"inputtext_sgre9n","name":"inputText7","type":"string","required":false,"defaultValue":""}]}],"states":[],"functions":[],"components":{"id":"page_gcftw0","componentName":"page","label":"page","properties":{"variant":"default","commonProperties":{}},"children":[{"id":"section_x3iyuh","componentName":"section","label":"section","properties":{"spaceX":"3","spaceY":"3","commonProperties":{}},"children":[{"id":"pageheader_vo9cmj","tag":"pageHeader1","componentName":"pageHeader","label":"Page Header","type":"group","children":[{"id":"button_nchhkx","tag":"button1","componentName":"button","label":"Button","type":"group","children":[],"interactions":{"onClick":{"type":"navigate","function":{"fnCustomCode":{"imports":[]}},"navigate":{"path":"listautente","name":"onClicklistaUtente"}}},"allowTypes":false,"data":{},"properties":{"label":"Voltar","variant":"secondary","size":"default","iconProperties":{"showIcon":true},"disabled":false,"commonProperties":{}},"childProperties":{}},{"id":"button_g4p1v0","tag":"button2","componentName":"button","label":"Button","type":"group","children":[],"interactions":{"onClick":{"type":"formSubmit","function":{"fnCustomCode":{"imports":[]}},"formSubmit":{"formId":"","targetForm":"form1"}}},"allowTypes":false,"data":{},"properties":{"label":"Gravar","variant":"default","size":"default","iconProperties":{"showIcon":true,"iconName":"Save"},"disabled":false,"commonProperties":{}},"childProperties":{}}],"interactions":{},"allowTypes":false,"data":{},"properties":{"title":"Novo Utente","description":"","variant":"h3","commonProperties":{}},"childProperties":{}},{"id":"form_3ufmy9","tag":"form1","componentName":"form","label":"Form","type":"group","children":[{"id":"card_yiaxc4","tag":"card1","componentName":"card","label":"Card","type":"group","children":[{"id":"cardheader_mfi3kh","tag":"cardHeader1","componentName":"cardHeader","label":"Card Header","children":[{"id":"headline_wz82vq","tag":"headline1","componentName":"headline","label":"Headline","type":"group","children":[],"interactions":{},"allowTypes":false,"data":{},"properties":{"title":"Informações do Utente","description":"","variant":"h6","commonProperties":{}},"childProperties":{}}],"interactions":{},"allowTypes":false,"data":{},"properties":{"commonProperties":{}}},{"id":"cardcontent_hgwvx2","tag":"cardContent1","componentName":"cardContent","label":"Card Content","children":[{"id":"grid_c8c73v","tag":"grid1","componentName":"grid","label":"Grid","type":"group","children":[{"id":"combobox_w037py","tag":"tipoUtente","componentName":"combobox","label":"Combobox","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{},"options":{"state":{"id":"","type":"IGRPOptionsProps[]","name":"selectcombobox1Options","defaultValue":"[]","imports":[]}}},"properties":{"label":"Tipo De Utente","variant":"single","placeholder":"Select an option...","selectLabel":"No option found","showSearch":true,"gridSize":"full","dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{},"required":true},"childProperties":{}},{"id":"inputtext_uagemt","tag":"nome","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Nome Completo","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":true,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_trworp","tag":"nif","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"NIF","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":true,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_1g3l8x","tag":"bi","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"CNI","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":true,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_9ysuk3","tag":"nome_mae","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Nome da Mãe","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":false,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_niv7q2","tag":"nomePai","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Nome do Pai","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":false,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputdatepicker_znkkec","tag":"dataNascimento","componentName":"inputDatePicker","label":"Date Picker","type":"group","children":[],"interactions":{"onDateChange":{"type":"function"}},"allowTypes":false,"data":{"date":{}},"properties":{"label":"Data de Nascimento","placeholder":"Please select a date...","helperText":"","disabled":false,"required":false,"gridSize":"full","dateFormat":"dd/MM/yyyy","today":"2025-01-01","startDate":"1900-01-01","endDate":"2099-12-31","defaultMonth":"2025-01-01","startMonth":"2025-01-01","month":"2025-01-01","endMonth":"2025-12-31","numberOfMonths":"1","weekStartsOn":0,"pagedNavigation":false,"reverseMonths":false,"hideNavigation":false,"disableNavigation":false,"fixedWeeks":false,"hideWeekdays":false,"showOutsideDays":false,"showWeekNumber":false,"animate":false,"broadcastCalendar":false,"ISOWeek":false,"captionLayout":"label","dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_xxt81r","tag":"morada","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Morada","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":false,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_mvqpf2","tag":"telefone","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Telefone","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":true,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_zeynhn","tag":"email","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Email","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":true,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}},{"id":"inputtext_sgre9n","tag":"cxPostal","componentName":"inputText","label":"Input Text","type":"group","children":[],"interactions":{"onChange":{"type":"function"}},"allowTypes":false,"data":{"value":{}},"properties":{"label":"Caixa Postal","placeholder":"","helperText":"","iconProperties":{"showIcon":false},"disabled":false,"required":false,"dataProperties":{"isVirtual":false,"isType":true},"commonProperties":{}},"childProperties":{}}],"interactions":{},"allowTypes":false,"data":{},"properties":{"gap":4,"variant":"cols4","commonProperties":{}},"childProperties":{"className":"col-span-1"}}],"interactions":{},"allowTypes":false,"data":{},"properties":{"spaceX":"3","spaceY":"3","commonProperties":{}},"childProperties":{}},{"id":"cardfooter_zrgmqr","tag":"cardFooter1","componentName":"cardFooter","label":"Card Footer","children":[],"interactions":{},"allowTypes":false,"data":{},"properties":{"commonProperties":{}}}],"interactions":{},"allowTypes":false,"data":{},"properties":{"commonProperties":{}}}],"interactions":{"onSubmit":{"type":"function","function":{"fnCustomCode":{"imports":[{"namespace":"import {createUtente} from '@/app/(myapp)/functions/services/utente-service'","id":"lxoau91fpa"}]},"fnName":"createUtente"}}},"allowTypes":true,"data":{"defaultValues":{"state":{"id":"","type":"z.infer<any>","name":"contentFormform1","defaultValue":"initForm1","imports":[]}}},"properties":{"validationMode":"onBlur","gridClassName":"flex flex-col","resetAfterSubmit":false,"commonProperties":{}},"childProperties":{},"dataType":"form1"}],"tag":"section1","data":{},"interactions":{}}],"tag":"page1","data":{},"interactions":{"onLoad":{"type":"function","function":{"fnCustomCode":{"imports":[{"id":"import_3Ewa_g","namespace":"import { utenteFormSchema,initialUtenteForm, UtenteFormData} from '@/app/(myapp)/functions/services/utente-service'"},{"id":"import_QQVFFE","namespace":"import {getTipoUtente} from '@/app/(myapp)/functions/services/config-service'"}],"fnCode":"    \r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const searchParams = useSearchParams();\r\n\r\n// Importações dinâmicas para funções usadas condicionalmente\r\n  const utenteService = () => import('@/app/(myapp)/functions/services/utente-service');\r\n\r\n  // Usando o esquema de validação do serviço\r\n  const form1 = utenteFormSchema;\r\n\r\n  type Form1ZodType = typeof form1;\r\n\r\n  // Usando os valores iniciais do serviço\r\n  const initForm1 = initialUtenteForm;\r\n\r\n  useEffect(() => {\r\n    const loadFormData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Carregar opções do combobox\r\n        const options = getTipoUtente();\r\n        setSelectcombobox1Options(options);\r\n\r\n        // Verificar se existe um ID na URL (modo edição)\r\n        const id = searchParams.get('id');\r\n        if (id) {\r\n          console.log(`[LOG-PAGE] Tentando carregar utente ID: ${id}`);\r\n          try {\r\n            // Importação dinâmica das funções necessárias para edição\r\n            const { fetchUtenteById, formatUtenteDataForForm } = await utenteService();\r\n            \r\n            // Carregar dados do utente pelo ID\r\n            const utenteData = await fetchUtenteById(Number(id));\r\n            console.log('[LOG-PAGE] Dados do utente recebidos:', utenteData);\r\n\r\n            if (utenteData) {\r\n              // Usar a função de formatação do serviço\r\n              const formattedData = formatUtenteDataForForm(utenteData);\r\n              \r\n              console.log('[LOG-PAGE] Dados formatados para o formulário:', formattedData);\r\n              setContentFormform1(formattedData);\r\n              setIsEditMode(true);\r\n            } else {\r\n              console.error('[LOG-PAGE] Dados do utente não encontrados');\r\n              setContentFormform1(initForm1);\r\n            }\r\n          } catch (error) {\r\n            console.error('[LOG-PAGE] Erro ao carregar dados do utente:', error);\r\n            setContentFormform1(initForm1);\r\n          }\r\n        } else {\r\n          console.log('[LOG-PAGE] Modo de criação - usando valores iniciais');\r\n          setContentFormform1(initForm1);\r\n          setIsEditMode(false);\r\n        }\r\n      } catch (error) {\r\n        console.error('[LOG-PAGE] Erro ao carregar dados do formulário:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadFormData();\r\n  }, [searchParams]);\r\n\r\n  const handleSubmit = async (data: UtenteFormData) => {\r\n    console.log('[LOG-PAGE] Dados do formulário para envio:', data);\r\n\r\n    // Preparar dados para envio à API\r\n    const id = searchParams.get('id');\r\n\r\n    try {\r\n      if (id) {\r\n        // Modo edição - importar apenas as funções necessárias para atualização\r\n        const { updateUtente, prepareUpdateUtenteData } = await utenteService();\r\n        \r\n        // Usar a função de preparação de dados do serviço\r\n        const updateData = prepareUpdateUtenteData(data);\r\n\r\n        console.log('[LOG-PAGE] Dados formatados para API (update):', updateData);\r\n        return updateUtente(Number(id), updateData);\r\n      } else {\r\n        // Modo criação - importar apenas as funções necessárias para criação\r\n        const { createUtente, prepareCreateUtenteData } = await utenteService();\r\n        \r\n        // Usar a função de preparação de dados do serviço\r\n        const createData = prepareCreateUtenteData(data);\r\n\r\n        console.log('[LOG-PAGE] Dados formatados para API (create):', createData);\r\n        return createUtente(createData);\r\n      }\r\n    } catch (error) {\r\n      console.error('[LOG-PAGE] Erro ao processar submissão:', error);\r\n      throw error;\r\n    }\r\n  };\r\n"}}}},"childProperties":{}},"imports":[]}